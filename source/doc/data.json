{
    "project": {},
    "files": {
        "js/app.js": {
            "name": "js/app.js",
            "modules": {
                "App": 1
            },
            "classes": {
                "App": 1
            },
            "fors": {
                "window.m": 1
            },
            "namespaces": {}
        },
        "js/context.js": {
            "name": "js/context.js",
            "modules": {},
            "classes": {
                "Context": 1
            },
            "fors": {
                "window.m": 1
            },
            "namespaces": {}
        },
        "js/event.js": {
            "name": "js/event.js",
            "modules": {
                "Mootor": 1
            },
            "classes": {
                "Event": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/mootor.js": {
            "name": "js/mootor.js",
            "modules": {},
            "classes": {
                "window.m": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/route.js": {
            "name": "js/route.js",
            "modules": {
                "Router": 1
            },
            "classes": {
                "Route": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/router.js": {
            "name": "js/router.js",
            "modules": {},
            "classes": {
                "Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/ui.js": {
            "name": "js/ui.js",
            "modules": {
                "UI": 1
            },
            "classes": {
                "UI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiapp.js": {
            "name": "js/uiapp.js",
            "modules": {},
            "classes": {
                "UIApp": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uibutton.js": {
            "name": "js/uibutton.js",
            "modules": {},
            "classes": {
                "UIButton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uifooter.js": {
            "name": "js/uifooter.js",
            "modules": {},
            "classes": {
                "UIFooter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiform.js": {
            "name": "js/uiform.js",
            "modules": {},
            "classes": {
                "UIForm": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformcamerasingle.js": {
            "name": "js/uiformcamerasingle.js",
            "modules": {},
            "classes": {
                "UIFormCameraSingle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformcheckbox.js": {
            "name": "js/uiformcheckbox.js",
            "modules": {},
            "classes": {
                "UIFormCheckbox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformdate.js": {
            "name": "js/uiformdate.js",
            "modules": {},
            "classes": {
                "UIFormDate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformdraw.js": {
            "name": "js/uiformdraw.js",
            "modules": {},
            "classes": {
                "UIFormDraw": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformfieldset.js": {
            "name": "js/uiformfieldset.js",
            "modules": {},
            "classes": {
                "UIFormFieldset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformgeo.js": {
            "name": "js/uiformgeo.js",
            "modules": {},
            "classes": {
                "UIFormGeo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiforminput.js": {
            "name": "js/uiforminput.js",
            "modules": {},
            "classes": {
                "UIFormInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformoption.js": {
            "name": "js/uiformoption.js",
            "modules": {},
            "classes": {
                "UIFormOption": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformpassword.js": {
            "name": "js/uiformpassword.js",
            "modules": {},
            "classes": {
                "UIFormPassword": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformselect.js": {
            "name": "js/uiformselect.js",
            "modules": {},
            "classes": {
                "UIFormSelect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformtext.js": {
            "name": "js/uiformtext.js",
            "modules": {},
            "classes": {
                "UIFormText": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformtextarea.js": {
            "name": "js/uiformtextarea.js",
            "modules": {},
            "classes": {
                "UIFormTextArea": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformtime.js": {
            "name": "js/uiformtime.js",
            "modules": {},
            "classes": {
                "UIFormTime": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformtoggleswitch.js": {
            "name": "js/uiformtoggleswitch.js",
            "modules": {},
            "classes": {
                "UIFormToggleSwitch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiformvirtualinput.js": {
            "name": "js/uiformvirtualinput.js",
            "modules": {},
            "classes": {
                "UIFormVirtualInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiheader.js": {
            "name": "js/uiheader.js",
            "modules": {},
            "classes": {
                "UIHeader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiloading.js": {
            "name": "js/uiloading.js",
            "modules": {},
            "classes": {
                "UILoading": 1
            },
            "fors": {
                "UIApp": 1
            },
            "namespaces": {}
        },
        "js/uinavbar.js": {
            "name": "js/uinavbar.js",
            "modules": {},
            "classes": {
                "UINavBar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uinavitem.js": {
            "name": "js/uinavitem.js",
            "modules": {},
            "classes": {
                "UINavItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uipanel.js": {
            "name": "js/uipanel.js",
            "modules": {},
            "classes": {
                "UIPanel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/uiview.js": {
            "name": "js/uiview.js",
            "modules": {},
            "classes": {
                "UIView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/view.js": {
            "name": "js/view.js",
            "modules": {
                "View": 1
            },
            "classes": {
                "View": 1
            },
            "fors": {
                "App": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "App": {
            "name": "App",
            "submodules": {},
            "classes": {
                "App": 1,
                "Context": 1
            },
            "fors": {
                "window.m": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "js/context.js",
            "line": 1,
            "description": "The App class defines the main object of the applications"
        },
        "Mootor": {
            "name": "Mootor",
            "submodules": {},
            "classes": {
                "window.m": 1,
                "Event": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/event.js",
            "line": 1,
            "description": "The Event class defines and manage events",
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "Router": {
            "name": "Router",
            "submodules": {},
            "classes": {
                "Route": 1,
                "Router": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/router.js",
            "line": 1,
            "description": "The Route class is for defining a route"
        },
        "UI": {
            "name": "UI",
            "submodules": {},
            "classes": {
                "UI": 1,
                "UIApp": 1,
                "UIButton": 1,
                "UIFooter": 1,
                "UIForm": 1,
                "UIFormCameraSingle": 1,
                "UIFormCheckbox": 1,
                "UIFormDate": 1,
                "UIFormDraw": 1,
                "UIFormFieldset": 1,
                "UIFormGeo": 1,
                "UIFormInput": 1,
                "UIFormOption": 1,
                "UIFormPassword": 1,
                "UIFormSelect": 1,
                "UIFormText": 1,
                "UIFormTextArea": 1,
                "UIFormTime": 1,
                "UIFormToggleSwitch": 1,
                "UIFormVirtualInput": 1,
                "UIHeader": 1,
                "UILoading": 1,
                "UINavBar": 1,
                "UINavItem": 1,
                "UIPanel": 1,
                "UIView": 1
            },
            "fors": {
                "UIApp": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "js/uiview.js",
            "line": 1,
            "description": "The UI class is the class for all user interface elements.\nIt is not directly used, but extended by many other classes."
        },
        "View": {
            "name": "View",
            "submodules": {},
            "classes": {
                "View": 1
            },
            "fors": {
                "App": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "js/view.js",
            "line": 1,
            "description": "The View class handles each view of the application. \nA list of views is specified in the applications options\nand the files are loaded from the \"views\" folder.\nEach view has a viewName.js, viewName.html and viewName.css files."
        }
    },
    "classes": {
        "App": {
            "name": "App",
            "shortname": "App",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "file": "js/app.js",
            "line": 22,
            "description": "The App class defines the main object of the applications",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "options",
                    "description": "An object defining options for the application.\n* views - An array with a list of view names",
                    "type": "Object"
                }
            ]
        },
        "window.m": {
            "name": "window.m",
            "shortname": "window.m",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mootor",
            "namespace": "",
            "file": "js/mootor.js",
            "line": 22,
            "description": "m public global object",
            "static": 1
        },
        "Context": {
            "name": "Context",
            "shortname": "Context",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "App",
            "namespace": "",
            "file": "js/context.js",
            "line": 1,
            "description": "Information about the context of the application (ej: device's viewport)",
            "return": {
                "description": "object"
            },
            "static": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "Event": {
            "name": "Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mootor",
            "namespace": "",
            "file": "js/event.js",
            "line": 1,
            "description": "The Event class defines and manage events",
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "Route": {
            "name": "Route",
            "shortname": "Route",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Router",
            "namespace": "",
            "file": "js/route.js",
            "line": 1,
            "description": "The Route class is for defining a route",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "Router": {
            "name": "Router",
            "shortname": "Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Router",
            "namespace": "",
            "file": "js/router.js",
            "line": 1,
            "description": "The Router class is for defining routes",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UI": {
            "name": "UI",
            "shortname": "UI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/ui.js",
            "line": 1,
            "description": "The UI class is the class for all user interface elements.\nIt is not directly used, but extended by many other classes.",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UIApp": {
            "name": "UIApp",
            "shortname": "UIApp",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiapp.js",
            "line": 1,
            "description": "The UIApp class is the UI representation of an app",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UIButton": {
            "name": "UIButton",
            "shortname": "UIButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uibutton.js",
            "line": 1,
            "description": "UIButton is a button element, it uses UIForm to extend elements with aria-roles",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFooter": {
            "name": "UIFooter",
            "shortname": "UIFooter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uifooter.js",
            "line": 1,
            "description": "The UIFooter class is a navigational element at the bottom of the page (footer)",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UIForm": {
            "name": "UIForm",
            "shortname": "UIForm",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiform.js",
            "line": 3,
            "description": "The UIForm is a form to input data",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormCameraSingle": {
            "name": "UIFormCameraSingle",
            "shortname": "UIFormCameraSingle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformcamerasingle.js",
            "line": 1,
            "description": "UIFormCameraSingle take or choose a single picture",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIFormCheckbox": {
            "name": "UIFormCheckbox",
            "shortname": "UIFormCheckbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformcheckbox.js",
            "line": 1,
            "description": "UIFormCheckbox is a checkbox input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIFormDate": {
            "name": "UIFormDate",
            "shortname": "UIFormDate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformdate.js",
            "line": 1,
            "description": "UIFormDate is a date input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIFormDraw": {
            "name": "UIFormDraw",
            "shortname": "UIFormDraw",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformdraw.js",
            "line": 1,
            "description": "UIFormDraw is a draw pseudo-input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIFormFieldset": {
            "name": "UIFormFieldset",
            "shortname": "UIFormFieldset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformfieldset.js",
            "line": 1,
            "description": "UIFormFieldset is a fieldset item of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIFormGeo": {
            "name": "UIFormGeo",
            "shortname": "UIFormGeo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformgeo.js",
            "line": 1,
            "description": "UIFormGeo detect geolocation",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIFormInput": {
            "name": "UIFormInput",
            "shortname": "UIFormInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiforminput.js",
            "line": 1,
            "description": "UIFormInput is an input item of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIFormOption": {
            "name": "UIFormOption",
            "shortname": "UIFormOption",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformoption.js",
            "line": 1,
            "description": "UIFormOption is a option input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIFormPassword": {
            "name": "UIFormPassword",
            "shortname": "UIFormPassword",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformpassword.js",
            "line": 1,
            "description": "UIFormPassword is a password input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIFormSelect": {
            "name": "UIFormSelect",
            "shortname": "UIFormSelect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformselect.js",
            "line": 1,
            "description": "UIFormSelect is a select input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormText": {
            "name": "UIFormText",
            "shortname": "UIFormText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformtext.js",
            "line": 1,
            "description": "UIFormText is a text input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormTextArea": {
            "name": "UIFormTextArea",
            "shortname": "UIFormTextArea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformtextarea.js",
            "line": 1,
            "description": "UIFormTextArea is a textarea input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UIFormTime": {
            "name": "UIFormTime",
            "shortname": "UIFormTime",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformtime.js",
            "line": 1,
            "description": "UIFormTime is a time input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIFormToggleSwitch": {
            "name": "UIFormToggleSwitch",
            "shortname": "UIFormToggleSwitch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformtoggleswitch.js",
            "line": 1,
            "description": "UIFormToggleSwitch is a toggle switch pseudo-input of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIFormVirtualInput": {
            "name": "UIFormVirtualInput",
            "shortname": "UIFormVirtualInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiformvirtualinput.js",
            "line": 1,
            "description": "UIFormVirtualInput is a virtual-input item of a form",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Emilio Mariscal (emi420 [at] gmail.com)"
        },
        "UIHeader": {
            "name": "UIHeader",
            "shortname": "UIHeader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiheader.js",
            "line": 1,
            "description": "The UIHeader class is a navigational element at the top of the page (header)",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UILoading": {
            "name": "UILoading",
            "shortname": "UILoading",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiloading.js",
            "line": 1,
            "description": "The UILoading is the loading indicator",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UINavBar": {
            "name": "UINavBar",
            "shortname": "UINavBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uinavbar.js",
            "line": 1,
            "description": "The UINavBar class is a navigational element at the top or bottom of the page (header or footer)",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UINavItem": {
            "name": "UINavItem",
            "shortname": "UINavItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uinavitem.js",
            "line": 1,
            "description": "The UINavItem is an item of a UINavBar, like an action button or an anchor link",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UIPanel": {
            "name": "UIPanel",
            "shortname": "UIPanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uipanel.js",
            "line": 1,
            "description": "A Panel to show views",
            "extends": "UI",
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "UIView": {
            "name": "UIView",
            "shortname": "UIView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UI",
            "namespace": "",
            "file": "js/uiview.js",
            "line": 1,
            "description": "The UIView class is the UI representation of a view",
            "extends": "UI",
            "is_constructor": 1,
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        },
        "View": {
            "name": "View",
            "shortname": "View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "View",
            "namespace": "",
            "file": "js/view.js",
            "line": 1,
            "description": "The View class handles each view of the application. \nA list of views is specified in the applications options\nand the files are loaded from the \"views\" folder.\nEach view has a viewName.js, viewName.html and viewName.css files.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An object defining options for the current view.\n* constructor - A function that will be run after the view has loaded (optional).\n* animation - a string defining the type of animation used to show this view (one of: \"slide-left\", \"slide-right\", \"none\").",
                    "type": "Object"
                }
            ],
            "author": "Martin Szyszlican (martinsz [at] gmail.com)"
        }
    },
    "classitems": [
        {
            "file": "js/app.js",
            "line": 50,
            "description": "The application's version number\nNote: It's not Mootor version, this value is defined in application code, not framework code.",
            "itemtype": "method",
            "name": "version",
            "params": [
                {
                    "name": "version",
                    "description": "The version number or name",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Version number or name",
                "type": "String"
            },
            "example": [
                "\n    m.app.version(\"beta1\");\n    if (m.app.version().indexOf(\"beta\") > -1) {\n        console.log(\"Warning: beta version\")\n    }"
            ],
            "class": "App",
            "module": "App"
        },
        {
            "file": "js/app.js",
            "line": 70,
            "description": "Application settings\nIf called with a key, returns the value. If called with key and value, sets value to key.",
            "itemtype": "method",
            "name": "settings",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the setting",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the setting",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "object the setting value"
            },
            "example": [
                "\n    m.app.settings(\"debug\", true);\n    if (m.app.settings(\"debug\") === true) {\n         console.log(\"Debug mode activated.\");\n    }\n    "
            ],
            "class": "App",
            "module": "App"
        },
        {
            "file": "js/app.js",
            "line": 94,
            "description": "Go to an url",
            "itemtype": "method",
            "name": "go",
            "params": [
                {
                    "name": "url",
                    "description": "The url to go",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Route"
            },
            "example": [
                "\n    m.app.go(\"/product/15/\");"
            ],
            "class": "App",
            "module": "App"
        },
        {
            "file": "js/app.js",
            "line": 129,
            "description": "Go to the previous view in the history",
            "itemtype": "method",
            "name": "back",
            "chainable": 1,
            "return": {
                "description": "Route"
            },
            "example": [
                "\n    m.app.back();"
            ],
            "class": "App",
            "module": "App"
        },
        {
            "file": "js/app.js",
            "line": 143,
            "description": "Set callbacks for app events",
            "itemtype": "method",
            "name": "on",
            "chainable": 1,
            "return": {
                "description": "App instance"
            },
            "example": [
                "\n    m.app.on(\"ready\", function(self) {\n        console.log(\"App started.\");\n    });"
            ],
            "class": "App",
            "module": "App"
        },
        {
            "file": "js/app.js",
            "line": 179,
            "description": "Creates a new app with the defined options.\nIf the app is already created, it can be called without options to have a reference to the Mootor app. \n\nApp instance factory",
            "itemtype": "method",
            "name": "app",
            "params": [
                {
                    "name": "views",
                    "description": "A list of view names to be initialized",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "App"
            },
            "example": [
                "\n    window.m.app({\n      views: [\n         \"index\",\n         \"view1\"\n      ]\n    });"
            ],
            "class": "window.m",
            "module": "App"
        },
        {
            "file": "js/context.js",
            "line": 20,
            "description": "System info",
            "itemtype": "property",
            "name": "os",
            "type": "function",
            "example": [
                "\n    if (m.context.os === \"android\") {\n         console.log(\"Your device use Android.\");\n    }"
            ],
            "class": "Context",
            "module": "App"
        },
        {
            "file": "js/context.js",
            "line": 31,
            "description": "Browser info",
            "itemtype": "property",
            "name": "browser",
            "type": "string",
            "example": [
                "\n    if (m.context.browser === \"firefox\") {\n         console.log(\"Your browser is Firefox.\");\n    }"
            ],
            "class": "Context",
            "module": "App"
        },
        {
            "file": "js/context.js",
            "line": 42,
            "description": "Viewport info",
            "itemtype": "property",
            "name": "viewport",
            "type": "object",
            "example": [
                "\n    img.width = m.context.viewport.width\n    img.height = m.context.viewport.height"
            ],
            "class": "Context",
            "module": "App"
        },
        {
            "file": "js/context.js",
            "line": 55,
            "description": "Apache Cordova info",
            "itemtype": "property",
            "name": "cordova",
            "type": "object",
            "example": [
                "\n    if (m.context.cordova) {\n        console.log(\"Your app is running on Cordova\");\n    }"
            ],
            "class": "Context",
            "module": "App"
        },
        {
            "file": "js/context.js",
            "line": 68,
            "description": "PhoneGap info",
            "itemtype": "property",
            "name": "phonegap",
            "type": "object",
            "example": [
                "\n    if (m.context.cordova) {\n        console.log(\"Your app is running on PhoneGap\");\n    }"
            ],
            "class": "Context",
            "module": "App"
        },
        {
            "file": "js/context.js",
            "line": 81,
            "description": "Android version info",
            "itemtype": "property",
            "name": "_androidversion",
            "type": "object",
            "access": "private",
            "tagname": "",
            "class": "Context",
            "module": "App"
        },
        {
            "file": "js/context.js",
            "line": 102,
            "itemtype": "property",
            "name": "context",
            "type": "Context",
            "class": "window.m",
            "module": "App"
        },
        {
            "file": "js/event.js",
            "line": 18,
            "description": "Events collection",
            "access": "private",
            "tagname": "",
            "class": "Event",
            "module": "Mootor"
        },
        {
            "file": "js/event.js",
            "line": 24,
            "description": "Add event to collection",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "Name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function\\",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    Mootor.on(\"myCustomEvent\", function(self) {\n        console.log(\"Event fired!\");\n    });"
            ],
            "class": "Event",
            "module": "Mootor"
        },
        {
            "file": "js/event.js",
            "line": 41,
            "description": "Dispatch event",
            "itemtype": "method",
            "name": "dispatch",
            "params": [
                {
                    "name": "event",
                    "description": "Name of the event",
                    "type": "String"
                },
                {
                    "name": "instance",
                    "description": "Instance for scope",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    Mootor.dispatch(\"myCustomEvent\", myInstance);"
            ],
            "class": "Event",
            "module": "Mootor"
        },
        {
            "file": "js/event.js",
            "line": 70,
            "description": "Extend objects with Event methods",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "object",
                    "description": "Object to extend",
                    "type": "Object"
                },
                {
                    "name": "objectName",
                    "description": "String name of the object",
                    "type": "String"
                }
            ],
            "example": [
                "\n    Person = function(name) {\n        this.name = name;\n    }\n\n    Mootor.Event.extend(Person.prototype);\n\n    person = new Person(\"Anon\");\n    person.on(\"fire\", function(self) {\n         console.log(self.name + \" is on fire!\");\n    }\n    person.dispatch(\"fire\", person);"
            ],
            "class": "Event",
            "module": "Mootor"
        },
        {
            "file": "js/route.js",
            "line": 35,
            "description": "The URL regex referenced by this route",
            "itemtype": "property",
            "name": "regex",
            "type": "String",
            "example": [
                "\n    url_regex = m.app.route(\"index.html\").regex;"
            ],
            "class": "Route",
            "module": "Router"
        },
        {
            "file": "js/route.js",
            "line": 45,
            "description": "The view that implements this route\nIf called with no parameters, it returns the currently set view in this route.",
            "itemtype": "method",
            "name": "view",
            "params": [
                {
                    "name": "view",
                    "description": "- The view that implements this route",
                    "type": "View",
                    "optional": true
                }
            ],
            "return": {
                "description": "view"
            },
            "example": [
                "\n    url_view = m.app.route(\"index.html\").view;"
            ],
            "class": "Route",
            "module": "Router"
        },
        {
            "file": "js/router.js",
            "line": 67,
            "description": "Create a route",
            "itemtype": "method",
            "name": "route",
            "params": [
                {
                    "name": "url",
                    "description": "Regular expresion string",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL to route",
                    "type": "String"
                },
                {
                    "name": "view",
                    "description": "View object",
                    "type": "View"
                }
            ],
            "return": {
                "description": "Route"
            },
            "example": [
                "\n    // Set route\n    m.app.route(\"index.html\", m.app.view(\"index\"));\n    /\n    // Get route\n    route = m.app.route(\"index.html\");"
            ],
            "class": "Router",
            "module": "Router"
        },
        {
            "file": "js/ui.js",
            "line": 33,
            "description": "DOM element",
            "itemtype": "property",
            "name": "el",
            "return": {
                "description": "",
                "type": "DOM Element"
            },
            "example": [
                "\n    appDOMElement = m.app.ui.el;\n    appDOMElement.addEventListener(\"touchend\", function() {\n        console.log(\"Header was touched.\");\n    });"
            ],
            "class": "UI",
            "module": "UI"
        },
        {
            "file": "js/ui.js",
            "line": 46,
            "description": "Zepto/jQuery object for DOM element",
            "itemtype": "property",
            "name": "$el",
            "return": {
                "description": "",
                "type": "Zepto/jQuery object instance"
            },
            "example": [
                "\n    $appDOMElement = m.app.ui.$el;\n    $appDOMElement.on(\"tap\", function() {\n        console.log(\"Header was tapped.\");\n    });"
            ],
            "class": "UI",
            "module": "UI"
        },
        {
            "file": "js/ui.js",
            "line": 59,
            "description": "Shows element (not necesarily, since the element's parent might be hidden or out of view)",
            "itemtype": "method",
            "name": "show",
            "return": {
                "description": "",
                "type": "UI"
            },
            "access": "private",
            "tagname": "",
            "example": [
                "\n    m.app.ui.show();"
            ],
            "class": "UI",
            "module": "UI"
        },
        {
            "file": "js/ui.js",
            "line": 72,
            "description": "Hides element from view",
            "itemtype": "method",
            "name": "hide",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "UI"
            },
            "example": [
                "\n    m.app.ui.hide();"
            ],
            "class": "UI",
            "module": "UI"
        },
        {
            "file": "js/uiform.js",
            "line": 50,
            "description": "Controls",
            "access": "private",
            "tagname": "",
            "class": "UIForm",
            "module": "UI"
        },
        {
            "file": "js/uiform.js",
            "line": 56,
            "itemtype": "method",
            "name": "registerControl",
            "params": [
                {
                    "name": "Constructor",
                    "description": "An object with a private _init method",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    UIForm.registerControl(UIFormText);  \n"
            ],
            "class": "UIForm",
            "module": "UI"
        },
        {
            "file": "js/uiformfieldset.js",
            "line": 42,
            "description": "Disable/enable input field",
            "itemtype": "method",
            "name": "disabled",
            "params": [
                {
                    "name": "state",
                    "description": "State of the input, true if disabled false if enabled",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Boolean state",
                "type": "Boolean"
            },
            "class": "UIFormFieldset",
            "module": "UI"
        },
        {
            "file": "js/uiheader.js",
            "line": 112,
            "description": "Back\nThe back button",
            "class": "UIHeader",
            "module": "UI"
        },
        {
            "file": "js/uiheader.js",
            "line": 118,
            "description": "Title\nThe text to display in the header\nIf called with no arguments returns the current title",
            "itemtype": "method",
            "name": "title",
            "params": [
                {
                    "name": "title",
                    "description": "The text for the title",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "chainable": 1,
            "example": [
                "\n    m.app.view(\"index\").ui.header.title(\"My title\");"
            ],
            "class": "UIHeader",
            "module": "UI"
        },
        {
            "file": "js/uiloading.js",
            "line": 33,
            "description": "Show/Hide the loading indicator",
            "itemtype": "method",
            "name": "loading",
            "params": [
                {
                    "name": "show",
                    "description": "Show or hide the loading indicator",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n    m.app.ui.loading();\n    m.app.ui.loading(true);"
            ],
            "class": "UIApp",
            "module": "UI"
        },
        {
            "file": "js/uiloading.js",
            "line": 74,
            "description": "Create and add the loading indicator's elements to the DOM",
            "itemtype": "method",
            "name": "create",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Zeptified element",
                "type": "Zepto"
            },
            "class": "UIApp",
            "module": "UI"
        },
        {
            "file": "js/uipanel.js",
            "line": 107,
            "description": "Initialize  a panel",
            "itemtype": "method",
            "name": "_init",
            "access": "private",
            "tagname": "",
            "class": "UIPanel",
            "module": "UI"
        },
        {
            "file": "js/uipanel.js",
            "line": 217,
            "description": "Move the element to the specified position inside the UIApp / m-views-container. \nIf coordinates are not specified, it returns coordinates object with the current position.",
            "itemtype": "method",
            "name": "position",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "coordinates",
                    "description": "Object with coordinates. Example: {x: 0, y: 0}",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Object with coordinates. Example: {x: 0, y: 0}",
                "type": "Object"
            },
            "class": "UIPanel",
            "module": "UI"
        },
        {
            "file": "js/uipanel.js",
            "line": 239,
            "description": "Set or get transition type",
            "itemtype": "method",
            "name": "transition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "transition",
                    "description": "Transition type. MUST be one of: slide-left, slide-right, none",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Transition type",
                "type": "String"
            },
            "class": "UIPanel",
            "module": "UI"
        },
        {
            "file": "js/uipanel.js",
            "line": 256,
            "description": "Set callback function for an event",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "Event string name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Callback function",
                "type": "Function"
            },
            "example": [
                "\n    m.app.view(\"index\").panel.on(\"transitionEnd\", function(self) {\n        console.log(\"transition end!\")\n    });"
            ],
            "class": "UIPanel",
            "module": "UI"
        },
        {
            "file": "js/view.js",
            "line": 104,
            "description": "Views collection",
            "class": "View",
            "module": "View"
        },
        {
            "file": "js/view.js",
            "line": 109,
            "description": "Current active view",
            "class": "View",
            "module": "View"
        },
        {
            "file": "js/view.js",
            "line": 114,
            "description": "Init View instance, load HTML, CSS and JavaScript files for the view",
            "class": "View",
            "module": "View"
        },
        {
            "file": "js/view.js",
            "line": 140,
            "description": "Get view HTML",
            "class": "View",
            "module": "View"
        },
        {
            "file": "js/view.js",
            "line": 233,
            "description": "Sets an event handler for the view\nPossible values for event: load, beforeLoad, unload, beforeUnload, ready",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "Defines in which event the handler will be called",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to be called when the event is fired.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "View"
            },
            "example": [
                "\n\n    // Simple example\n\n    m.app.route(\"^#index$\", app.view(\"index\"));\n\n    m.app.view(\"index\").on(\"load\", function(self) {\n       console.log(\"Index view is loaded.\"); \n    });\n\n    // With parameters\n\n    m.app.route(\"^#product/(.*)\", app.view(\"product\"));\n  \n    m.app.view(\"product\").on(\"load\", function(self) {\n       console.log(\"Product Id: \" + self.params[0];\n    });"
            ],
            "class": "View",
            "module": "View"
        },
        {
            "file": "js/view.js",
            "line": 272,
            "description": "Create or get a view",
            "itemtype": "method",
            "name": "view",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the view",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options object for the view",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "View the referenced view object"
            },
            "example": [
                "\n    indexView = m.app.view(\"index\");"
            ],
            "class": "App",
            "module": "View"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nEvents collection",
            "line": " js/event.js:18"
        },
        {
            "message": "Missing item type\nControls",
            "line": " js/uiform.js:50"
        },
        {
            "message": "Missing item type\nBack\nThe back button",
            "line": " js/uiheader.js:112"
        },
        {
            "message": "Missing item type\nViews collection",
            "line": " js/view.js:104"
        },
        {
            "message": "Missing item type\nCurrent active view",
            "line": " js/view.js:109"
        },
        {
            "message": "Missing item type\nInit View instance, load HTML, CSS and JavaScript files for the view",
            "line": " js/view.js:114"
        },
        {
            "message": "Missing item type\nGet view HTML",
            "line": " js/view.js:140"
        }
    ]
}